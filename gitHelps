Configurações iniciais
 git config --global user.name "Ed Cesar"
 git config --global user.email "edcesar@edcesar.com"
 git config --global color.ui true


 git init  -> Cria um novo repositorio git
 git add . -> Adiciona todos os arquivos
 git add arquivo.php -> Adiciona apenas o arquivo especificado

 git status

 git commit -m "comit inicial"
 git log
 git commit -a -m "Descricão" -> Aciona e commita em apenas um passo

 git log -p     -> Mostra quais foram todas as alterações feitas
 git log -p 2   -> Mostra quais foram as ultimas duas alterações
 git log --stat -> Tráa um resumo estatistico das alterações feitas
 git log --pretty=oneline -> Traz um resumo de todos os commites, um por linha
 git log --pretty=format:"%h - %an, %ar : %s" -> Traz um resumo dos commit, mostrando a quanto tempo foram feitos
 git log --since=2.days -> Traz os logs dos ultimos dois dias

 Ignorar arquivos - > Criar um arquivo com nome de .gitignore e colocar o nome dos arquivos, um por linha.

 git reset HEAD teste2.txt -> Para voltar um arquivo do stagio 2 para o stagio 1, ou seja, que foi adicionado, mas ainda não commitado


 git reset HEAD~1 -> Volta um commit
 git reset HEAD~1 --soft -> Volta o ultimo commit, deixando o arquivo na stage area 2
 git reset HEAD~1 --hard -> Desfaz todas as alteracões do ultimo commit
 git brach -b nomeDoBranch -> Para criar um branch
 git checkout nomeDaBranch -> Para altera de branch

 git merge nomeDoBranch -> para fazer merge com algum branch (importante: Fica log do merge no git log)
 git rebase nomeDoBranch -> faz um merge com o branch especificado, ordenando pela data de criacao dos commits (importante: no git log, fica os logs dos commits, mas não especifica de qual branch veio, ou que veio de um merge)

 git branch -D nome-do-branch -> para deletar um branch (Após uma funcionalidade ser desenvolvida e o merge realizado, você poderá optar por remover o branch)

ssh-keygen para iniciar o processo de criação de chave publica (Só dando enter, serve)
cat /home/vagrant/.ssh/id_rsa.pub para visualizar a chave gerada. Copiar e colar no gitHub
(Por algum motivo não funcionou, ainda ficou pedindo a senha)

git config --global credential.helper cache -> para não solicitar mais a senha (Funciona mesmo sem o ssh-keygen)
 
 git branch -a -> para mostrar todos os branch´s remoto
 git checkout -b novoBranch origin/novoBranch -> para criar um novo branch local, já espelhando no remoto

 
















